// gameManager.js

const { uuidv7 } = require('uuidv7');
const axios = require('axios');
const {
  ChannelType,
  PermissionFlagsBits,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle
} = require('discord.js');

const User = require('../models/user');
const Match = require('../models/match');

const { formatMatchConfig, createMatchOnServer, startServer } = require('./cs2ServerController');

// ================================
//            CONSTANTS
// ================================
const activeGames = new Map();

const MAPS = [
  { name: 'Mirage', code: 'de_mirage', emoji: 'üèúÔ∏è' },
  { name: 'Dust', code: 'de_dust2', emoji: 'üå™Ô∏è' },
  { name: 'Nuke', code: 'de_nuke', emoji: '‚ò¢Ô∏è' },
  { name: 'Train', code: 'de_train', emoji: 'üöÇ' },
  { name: 'Cache', code: 'de_cache', emoji: 'üõ°Ô∏è' }
];

function generateStringHash(str) {
  let hash = 0;
  if (str.length === 0) return hash;

  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }

  return Math.abs(hash);
}

// ================================
//      INITIAL LOAD OF GAMES
// ================================
(async () => {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î –≤—Å–µ –º–∞—Ç—á–∏ –≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö
    const games = await Match.find({
      gameStage: { $in: ['waiting', 'readyCheck', 'draft', 'veto', 'teams_done'] }
    });

    games.forEach(doc => {
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (teams_done), team1/team2 –º–æ–≥—É—Ç –±—ã—Ç—å Object(Map).
      // –ù–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏ –¥—Ä–∞—Ñ—Ç–∞ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –º–∞—Å—Å–∏–≤–∞–º–∏ Discord ID.
      // –í "—Å—ã—Ä–æ–º" doc.team1 –±—É–¥–µ—Ç Map-–æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —É–∂–µ —Ñ–∏–Ω–∞–ª.
      // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏–º, –≤ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ç.–∫. –¥—Ä–∞—Ñ—Ç —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω.
      const team1 = typeof doc.team1 === 'object' && !Array.isArray(doc.team1)
        ? []
        : (doc.team1 ?? []);
      const team2 = typeof doc.team2 === 'object' && !Array.isArray(doc.team2)
        ? []
        : (doc.team2 ?? []);

      const gameData = {
        gameId: doc.gameId,
        guildId: doc.guildId,
        lobbyId: doc.lobbyId,
        queueChannelId: doc.queueChannelId,
        requiredPlayers: doc.requiredPlayers,

        players: new Set(doc.players),
        readyPlayers: new Set(doc.readyPlayers),
        restPlayers: doc.restPlayers ?? [],
        team1, // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ Discord ID
        team2,
        removedMaps: new Set(doc.removedMaps),

        finalMap: doc.finalMap,
        captain1: doc.captain1,
        captain2: doc.captain2,
        gameStage: doc.gameStage,
        vetoTurns: doc.vetoTurns,
        draftTurns: doc.draftTurns,

        team1ChannelId: doc.team1ChannelId,
        team2ChannelId: doc.team2ChannelId,

        embedMessageId: doc.embedMessageId,
        embedMessage: null
      };
      activeGames.set(gameData.gameId, gameData);
    });

    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: ${games.length}`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä:", err);
  }
})();

module.exports.activeGames = activeGames;

/**
 * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É (–∑–∞–ø–∏—Å—å –≤ –ë–î –∏ –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏).
 */
async function createNewGame({ guild, queueTextChannel, lobbyVoice, requiredPlayers }) {
  const gameId = generateStringHash(uuidv7());

  const gameData = {
    gameId,
    guildId: guild.id,
    lobbyId: lobbyVoice.id,
    queueChannelId: queueTextChannel.id,
    requiredPlayers,

    players: new Set(),
    readyPlayers: new Set(),
    restPlayers: [],
    team1: [], // –º–∞—Å—Å–∏–≤ Discord ID
    team2: [],
    removedMaps: new Set(),
    finalMap: null,

    captain1: null,
    captain2: null,
    gameStage: 'waiting',
    vetoTurns: 0,
    draftTurns: 0,

    team1ChannelId: null,
    team2ChannelId: null,

    embedMessage: null
  };

  activeGames.set(gameId, gameData);

  // –°–æ–∑–¥–∞—ë–º embed-—Å–æ–æ–±—â–µ–Ω–∏–µ
  const embed = new EmbedBuilder()
    .setTitle(`–ú–∞—Ç—á #${gameId} ‚Äî –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤`)
    .setDescription(getWaitingDescription(gameData))
    .setColor('Gold')
    .setFooter({ text: '–ó–∞–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª Lobby –¥–ª—è —É—á–∞—Å—Ç–∏—è.' });

  const msg = await queueTextChannel.send({ embeds: [embed] });
  gameData.embedMessage = msg;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
  const matchRecord = new Match({
    gameId,
    guildId: guild.id,
    lobbyId: lobbyVoice.id,
    queueChannelId: queueTextChannel.id,
    requiredPlayers,
    gameStage: 'waiting',
    embedMessageId: msg.id
  });
  await matchRecord.save();

  return gameData;
}
module.exports.createNewGame = createNewGame;

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç embed-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π (–µ—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω).
 */
async function restoreActiveMatches(client) {
  startServer(client);

  const ongoingMatches = await Match.find({ gameStage: { $ne: 'teams_done' } });
  for (const matchDoc of ongoingMatches) {
    const team1 = typeof matchDoc.team1 === 'object' && !Array.isArray(matchDoc.team1)
      ? []
      : (matchDoc.team1 ?? []);
    const team2 = typeof matchDoc.team2 === 'object' && !Array.isArray(matchDoc.team2)
      ? []
      : (matchDoc.team2 ?? []);

    const gameData = {
      gameId: matchDoc.gameId,
      guildId: matchDoc.guildId,
      lobbyId: matchDoc.lobbyId,
      queueChannelId: matchDoc.queueChannelId,
      requiredPlayers: matchDoc.requiredPlayers,

      players: new Set(matchDoc.players),
      readyPlayers: new Set(matchDoc.readyPlayers),
      restPlayers: matchDoc.restPlayers ?? [],
      team1,
      team2,
      removedMaps: new Set(matchDoc.removedMaps),
      finalMap: matchDoc.finalMap,
      captain1: matchDoc.captain1,
      captain2: matchDoc.captain2,
      gameStage: matchDoc.gameStage,
      vetoTurns: matchDoc.vetoTurns,
      draftTurns: matchDoc.draftTurns,

      team1ChannelId: matchDoc.team1ChannelId,
      team2ChannelId: matchDoc.team2ChannelId,
      embedMessageId: matchDoc.embedMessageId,
      embedMessage: null
    };

    try {
      const guild = await client.guilds.fetch(gameData.guildId);
      const channel = guild.channels.cache.get(gameData.queueChannelId);
      if (channel && gameData.embedMessageId) {
        const restoredMsg = await channel.messages.fetch(gameData.embedMessageId);
        gameData.embedMessage = restoredMsg;
      }
    } catch (err) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å embed-—Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç—á–∞ ${gameData.gameId}`, err);
    }

    activeGames.set(gameData.gameId, gameData);
    console.log(`–ú–∞—Ç—á #${gameData.gameId} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±–∞–∑—ã (—Å—Ç–∞–¥–∏—è: ${gameData.gameStage}).`);
  }
}
module.exports.restoreActiveMatches = restoreActiveMatches;

/**
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª Lobby
 * –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—á–µ–π.
 */
async function manageLobbyJoinLeave(oldState, newState, client) {
  const leftChannel = oldState.channel;
  const joinedChannel = newState.channel;

  if (joinedChannel) {
    const member = newState.member;
    const isGameLobby = Array.from(activeGames.values()).some(
      game => game.lobbyId === joinedChannel.id
    );

    if (isGameLobby) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É Steam, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ Lobby
      try {
        const userRecord = await User.findOne({ userId: member.id });
        if (!userRecord || !userRecord.steamId) {
          await member.voice.setChannel(null, "–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Steam –∞–∫–∫–∞—É–Ω—Ç");
          if (member.send) {
            member.send("–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Steam –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.");
          }
          return;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º –º–∞—Ç—á–µ (–Ω–µ waiting), –≤—ã–∫–∏–¥—ã–≤–∞–µ–º
        for (const data of activeGames.values()) {
          if (
            data.players.has(member.id) &&
            data.lobbyId !== joinedChannel.id &&
            data.gameStage !== 'waiting'
          ) {
            await member.voice.setChannel(null, "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º –º–∞—Ç—á–µ");
            return;
          }
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–≤—è–∑–∫–∏ Steam:", err);
        return;
      }
    }
  }

  let leftGameData = null;
  let joinedGameData = null;

  // –ò—â–µ–º –∏–≥—Ä—É (waiting), –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª
  if (leftChannel) {
    for (const data of activeGames.values()) {
      if (data.lobbyId === leftChannel.id && data.gameStage === 'waiting') {
        leftGameData = data;
        break;
      }
    }
  }

  // –ò—â–µ–º –∏–≥—Ä—É (waiting), –≤ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª
  if (joinedChannel) {
    for (const data of activeGames.values()) {
      if (data.lobbyId === joinedChannel.id && data.gameStage === 'waiting') {
        joinedGameData = data;
        break;
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ waiting-–ª–æ–±–±–∏
  if (leftGameData) {
    leftGameData.players.delete(oldState.id);
    await updateMatchInDB(leftGameData.gameId, {
      players: Array.from(leftGameData.players)
    });
    await updateWaitingEmbed(leftGameData, client);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–µ waiting-–ª–æ–±–±–∏
  if (joinedGameData) {
    joinedGameData.players.add(newState.id);
    await updateMatchInDB(joinedGameData.gameId, {
      players: Array.from(joinedGameData.players)
    });
    await updateWaitingEmbed(joinedGameData, client);

    // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ readyCheck
    if (joinedGameData.players.size >= joinedGameData.requiredPlayers) {
      const guild = await client.guilds.fetch(joinedGameData.guildId);
      const lobby = guild.channels.cache.get(joinedGameData.lobbyId);
      if (lobby) {
        // –ü–µ—Ä–µ–∫—Ä—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è Everyone –∏ –æ–ø—è—Ç—å —Ä–∞–∑—Ä–µ—à–∞–µ–º (—Ö–∞–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—Ö–æ–¥)
        await lobby.permissionOverwrites.edit(guild.roles.everyone, { Connect: false });
        await lobby.permissionOverwrites.edit(guild.roles.everyone, { Connect: true });
      }
      await startReadyCheck(joinedGameData, client);
    }
  }
}
module.exports.manageLobbyJoinLeave = manageLobbyJoinLeave;

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç embed "waiting".
 */
async function updateWaitingEmbed(gameData, client) {
  if (gameData.gameStage !== 'waiting') return;

  await fetchEmbedMessageIfNeeded(gameData, client);
  if (!gameData.embedMessage) return;

  const embed = new EmbedBuilder()
    .setTitle(`–ú–∞—Ç—á #${gameData.gameId} ‚Äî –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤`)
    .setDescription(getWaitingDescription(gameData))
    .setColor('Gold')
    .setFooter({ text: '–ó–∞–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª Lobby –¥–ª—è —É—á–∞—Å—Ç–∏—è.' });

  await gameData.embedMessage.edit({ embeds: [embed], components: [] });
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç —ç—Ç–∞–ø readyCheck: –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å "–Ø –≥–æ—Ç–æ–≤".
 */
async function startReadyCheck(gameData, client) {
  gameData.gameStage = 'readyCheck';
  gameData.readyPlayers.clear();

  await updateMatchInDB(gameData.gameId, {
    gameStage: gameData.gameStage,
    readyPlayers: []
  });

  await fetchEmbedMessageIfNeeded(gameData, client);
  if (!gameData.embedMessage) {
    console.error(`Embed-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∏–≥—Ä—ã ${gameData.gameId}. –ü—Ä–æ–ø—É—Å–∫ —ç—Ç–∞–ø–∞ readyCheck.`);
    return;
  }

  // –ö–Ω–æ–ø–∫–∞ "–Ø –≥–æ—Ç–æ–≤!"
  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(`ready_${gameData.gameId}`)
      .setLabel('–Ø –≥–æ—Ç–æ–≤!')
      .setEmoji('‚úÖ')
      .setStyle(ButtonStyle.Primary)
  );

  const embed = new EmbedBuilder()
    .setTitle(`–ú–∞—Ç—á #${gameData.gameId} ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏`)
    .setDescription(getReadyDescriptionCheck(gameData))
    .setColor('Blue');

  await gameData.embedMessage.edit({
    embeds: [embed],
    components: [row]
  });

  // –¢–∞–π–º–µ—Ä 15 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –Ω–∞–∂–∞–ª, —É–±–∏—Ä–∞–µ–º –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ waiting
  gameData.readyTimeout = setTimeout(async () => {
    const notReady = Array.from(gameData.players).filter(pid => !gameData.readyPlayers.has(pid));
    for (const nr of notReady) {
      gameData.players.delete(nr);
    }
    await updateMatchInDB(gameData.gameId, {
      players: Array.from(gameData.players),
      readyPlayers: Array.from(gameData.readyPlayers)
    });

    if (gameData.players.size < gameData.requiredPlayers) {
      await returnToWaitingStage(gameData, client);
    } else {
      await startDraftPhase(gameData, client);
    }
  }, 15000);
}
module.exports.startReadyCheck = startReadyCheck;

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –≥–æ—Ç–æ–≤!"
 */
async function handleReadyCheck(interaction, gameId) {
  try {
    const gameData = activeGames.get(gameId);
    if (!gameData || gameData.gameStage !== 'readyCheck') {
      if (!interaction.replied && !interaction.deferred) {
        return await interaction.reply({ content: '–°–µ–π—á–∞—Å –Ω–µ —ç—Ç–∞–ø –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏!', ephemeral: true });
      }
      return;
    }

    if (!gameData.players.has(interaction.user.id)) {
      if (!interaction.replied && !interaction.deferred) {
        return await interaction.reply({ content: '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ.', ephemeral: true });
      }
      return;
    }

    // Defer the update to prevent interaction expiration
    if (!interaction.replied && !interaction.deferred) {
      await interaction.deferUpdate();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ readyPlayers
    gameData.readyPlayers.add(interaction.user.id);

    await updateMatchInDB(gameData.gameId, {
      readyPlayers: Array.from(gameData.readyPlayers)
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º embed
    const embed = new EmbedBuilder()
      .setTitle(`–ú–∞—Ç—á #${gameData.gameId} ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏`)
      .setDescription(getReadyDescriptionCheck(gameData))
      .setColor('Blue');

    // Use editReply if already deferred
    if (interaction.deferred) {
      await interaction.editReply({
        embeds: [embed],
        components: interaction.message.components
      });
    } else if (!interaction.replied) {
      await interaction.update({
        embeds: [embed],
        components: interaction.message.components
      });
    }

    // –ï—Å–ª–∏ –≤—Å–µ –Ω–∞–∂–∞–ª–∏ "–Ø –≥–æ—Ç–æ–≤", —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
    if (gameData.readyPlayers.size === gameData.players.size) {
      if (gameData.readyTimeout) {
        clearTimeout(gameData.readyTimeout);
        delete gameData.readyTimeout;
      }
      await startDraftPhase(gameData, interaction.client);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handleReadyCheck:', error);
    if (!interaction.replied && !interaction.deferred) {
      try {
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏!', ephemeral: true });
      } catch (replyErr) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyErr);
      }
    }
  }
}
module.exports.handleReadyCheck = handleReadyCheck;

/**
 * –ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ "waiting".
 */
async function returnToWaitingStage(gameData, client) {
  gameData.gameStage = 'waiting';

  const guild = await client.guilds.fetch(gameData.guildId);
  const lobby = guild.channels.cache.get(gameData.lobbyId);
  if (lobby) {
    await lobby.permissionOverwrites.edit(guild.roles.everyone, { Connect: true });
  }

  await updateMatchInDB(gameData.gameId, {
    gameStage: 'waiting'
  });

  const embed = new EmbedBuilder()
    .setTitle(`–ú–∞—Ç—á #${gameData.gameId} ‚Äî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!`)
    .setDescription(`–û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã—Ö. –û—Å—Ç–∞–ª–æ—Å—å: ${gameData.players.size}/${gameData.requiredPlayers}`)
    .setColor('DarkRed');

  await fetchEmbedMessageIfNeeded(gameData, client);
  if (gameData.embedMessage) {
    await gameData.embedMessage.edit({ embeds: [embed], components: [] });
  }
}
module.exports.returnToWaitingStage = returnToWaitingStage;

/**
 * –≠—Ç–∞–ø "draft" ‚Äì –∫–∞–ø–∏—Ç–∞–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ restPlayers
 */
async function startDraftPhase(gameData, client) {
  gameData.gameStage = 'draft';
  gameData.draftTurns = 0;

  // –ï—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∏–∑ —Å–ø–∏—Å–∫–∞
  if (!gameData.captain1 || !gameData.captain2) {
    const arr = Array.from(gameData.players);
    shuffleArray(arr);
    gameData.captain1 = arr[0];
    gameData.captain2 = arr[1];
    gameData.restPlayers = arr.slice(2);

    if (!gameData.team1.includes(gameData.captain1)) {
      gameData.team1.push(gameData.captain1);
    }
    if (!gameData.team2.includes(gameData.captain2)) {
      gameData.team2.push(gameData.captain2);
    }
  }

  await updateMatchInDB(gameData.gameId, {
    gameStage: gameData.gameStage,
    captain1: gameData.captain1,
    captain2: gameData.captain2,
    team1: gameData.team1,
    team2: gameData.team2,
    restPlayers: gameData.restPlayers
  });

  const guild = await client.guilds.fetch(gameData.guildId);

  // –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö < 2, –¥—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
  if (gameData.restPlayers.length < 2) {
    if (gameData.restPlayers.length === 1) {
      const onlyOne = gameData.restPlayers[0];
      if (gameData.team1.length <= gameData.team2.length) {
        gameData.team1.push(onlyOne);
      } else {
        gameData.team2.push(onlyOne);
      }
      gameData.restPlayers = [];
    }
    await updateMatchInDB(gameData.gameId, {
      team1: gameData.team1,
      team2: gameData.team2,
      restPlayers: gameData.restPlayers
    });
    await startVetoPhase(gameData, client);
    return;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embed —Å —Å–æ—Å—Ç–∞–≤–æ–º –∫–æ–º–∞–Ω–¥, –∫–∞–ø–∏—Ç–∞–Ω–∞–º–∏ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
  const team1Members = await Promise.all(
    gameData.team1.map(async pid => {
      const member = await guild.members.fetch(pid);
      return member.user.username;
    })
  );
  const team2Members = await Promise.all(
    gameData.team2.map(async pid => {
      const member = await guild.members.fetch(pid);
      return member.user.username;
    })
  );
  const currentCaptain = (gameData.draftTurns % 2 === 0) ? gameData.captain1 : gameData.captain2;
  const freePlayers = gameData.restPlayers.map(pid => `<@${pid}>`).join(', ') || '_–Ω–µ—Ç_';

  const embed = new EmbedBuilder()
    .setTitle(`–ú–∞—Ç—á #${gameData.gameId} ‚Äî –î—Ä–∞—Ñ—Ç –∏–≥—Ä–æ–∫–æ–≤`)
    .setDescription(
      `–ö–∞–ø–∏—Ç–∞–Ω—ã: <@${gameData.captain1}> –∏ <@${gameData.captain2}>\n` +
      `–°–µ–π—á–∞—Å —Ö–æ–¥: <@${currentCaptain}>\n\n` +
      `–ö–æ–º–∞–Ω–¥–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞ <@${gameData.captain1}>: ${team1Members.join(', ') || '_–Ω–µ—Ç_'}\n` +
      `–ö–æ–º–∞–Ω–¥–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞ <@${gameData.captain2}>: ${team2Members.join(', ') || '_–Ω–µ—Ç_'}\n\n` +
      `–°–≤–æ–±–æ–¥–Ω—ã–µ –∏–≥—Ä–æ–∫–∏: ${freePlayers}`
    )
    .setColor('Blue');

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  const buttons = [];
  for (const pid of gameData.restPlayers) {
    const member = await guild.members.fetch(pid);
    buttons.push(
      new ButtonBuilder()
        .setCustomId(`pick_${gameData.gameId}_${pid}`)
        .setLabel(member.user.username)
        .setEmoji('üôã')
        .setStyle(ButtonStyle.Secondary)
    );
  }
  const rows = createRowsForButtons(buttons, 5);

  await fetchEmbedMessageIfNeeded(gameData, client);
  if (!gameData.embedMessage) {
    console.error(`Embed –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∏–≥—Ä—ã ${gameData.gameId}. –ü—Ä–æ–ø—É—Å–∫ –¥—Ä–∞—Ñ—Ç–∞.`);
    return;
  }
  await gameData.embedMessage.edit({ embeds: [embed], components: rows });

  // –¢–∞–π–º–µ—Ä 60 —Å–µ–∫—É–Ω–¥ ‚Äì –µ—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–ª, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
  gameData.draftTimeout = setTimeout(async () => {
    if (gameData.restPlayers.length > 0) {
      const randomIndex = Math.floor(Math.random() * gameData.restPlayers.length);
      const autoPickId = gameData.restPlayers[randomIndex];
      await processDraftPick(gameData, autoPickId, client, guild, null);
    }
  }, 60000);
}
module.exports.startDraftPhase = startDraftPhase;

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç "–ø–∏–∫" –∏–≥—Ä–æ–∫–∞ (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ team1/team2).
 */
async function processDraftPick(gameData, pickPlayerId, client, guild, interaction = null) {
  const isC1Turn = (gameData.draftTurns % 2 === 0);
  const currentCaptain = isC1Turn ? gameData.captain1 : gameData.captain2;

  // –ï—Å–ª–∏ –µ—Å—Ç—å interaction, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–Ω
  if (interaction && interaction.user.id !== currentCaptain) {
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({ content: '–°–µ–π—á–∞—Å —Ö–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞!', ephemeral: true });
    }
    return;
  }

  const idx = gameData.restPlayers.indexOf(pickPlayerId);
  if (idx === -1) {
    if (interaction && !interaction.replied && !interaction.deferred) {
      await interaction.reply({ content: '–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω!', ephemeral: true });
    }
    return;
  }

  // –£–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö
  gameData.restPlayers.splice(idx, 1);

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É –∫–∞–ø–∏—Ç–∞–Ω–∞
  if (isC1Turn) {
    gameData.team1.push(pickPlayerId);
  } else {
    gameData.team2.push(pickPlayerId);
  }
  gameData.draftTurns++;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º
  await updateMatchInDB(gameData.gameId, {
    team1: gameData.team1,
    team2: gameData.team2,
    restPlayers: gameData.restPlayers,
    draftTurns: gameData.draftTurns
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π embed
  const newCurrentCaptain = (gameData.draftTurns % 2 === 0)
    ? gameData.captain1
    : gameData.captain2;

  const team1Members = await Promise.all(gameData.team1.map(async pid => {
    const member = await guild.members.fetch(pid);
    return member.user.username;
  }));
  const team2Members = await Promise.all(gameData.team2.map(async pid => {
    const member = await guild.members.fetch(pid);
    return member.user.username;
  }));
  const freePlayers = gameData.restPlayers.map(pid => `<@${pid}>`).join(', ') || '_–Ω–µ—Ç_';

  const embedDescription = `–ö–∞–ø–∏—Ç–∞–Ω—ã: <@${gameData.captain1}> –∏ <@${gameData.captain2}>\n` +
    `–°–µ–π—á–∞—Å —Ö–æ–¥: <@${newCurrentCaptain}>\n\n` +
    `–ö–æ–º–∞–Ω–¥–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞ <@${gameData.captain1}>: ${team1Members.join(', ') || '_–Ω–µ—Ç_'}\n` +
    `–ö–æ–º–∞–Ω–¥–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞ <@${gameData.captain2}>: ${team2Members.join(', ') || '_–Ω–µ—Ç_'}\n\n` +
    `–°–≤–æ–±–æ–¥–Ω—ã–µ –∏–≥—Ä–æ–∫–∏: ${freePlayers}`;

  const embed = new EmbedBuilder()
    .setTitle(`–ú–∞—Ç—á #${gameData.gameId} ‚Äî –î—Ä–∞—Ñ—Ç –∏–≥—Ä–æ–∫–æ–≤`)
    .setDescription(embedDescription)
    .setColor('Blue');

  // –û—Ç–∫–ª—é—á–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
  const oldRows = gameData.embedMessage.components;
  const newRows = [];
  for (const row of oldRows) {
    const row2 = new ActionRowBuilder();
    for (const c of row.components) {
      const btn = ButtonBuilder.from(c);
      const id = btn.data?.custom_id;
      if (!id) {
        row2.addComponents(btn);
        continue;
      }
      const [act, gId, pId] = id.split('_');
      if (pId === pickPlayerId) {
        btn.setDisabled(true).setStyle(ButtonStyle.Danger);
      }
      if (!gameData.restPlayers.includes(pId)) {
        btn.setDisabled(true);
      }
      row2.addComponents(btn);
    }
    newRows.push(row2);
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª interaction, –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ update. –ò–Ω–∞—á–µ ‚Äì —á–µ—Ä–µ–∑ edit.
  if (interaction) {
    if (interaction.deferred) {
      await interaction.editReply({ embeds: [embed], components: newRows });
    } else if (!interaction.replied) {
      await interaction.update({ embeds: [embed], components: newRows });
    }
  } else {
    await gameData.embedMessage.edit({ embeds: [embed], components: newRows });
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∏–≥—Ä–æ–∫–∏
  if (gameData.draftTimeout) {
    clearTimeout(gameData.draftTimeout);
    delete gameData.draftTimeout;
  }

  if (gameData.restPlayers.length === 1) {
    const lonePid = gameData.restPlayers[0];
    if (gameData.team1.length <= gameData.team2.length) {
      gameData.team1.push(lonePid);
    } else {
      gameData.team2.push(lonePid);
    }
    gameData.restPlayers = [];
    await updateMatchInDB(gameData.gameId, {
      team1: gameData.team1,
      team2: gameData.team2,
      restPlayers: []
    });
    await startVetoPhase(gameData, client);
    return;
  } else if (gameData.restPlayers.length === 0) {
    await startVetoPhase(gameData, client);
    return;
  }

  // –ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
  gameData.draftTimeout = setTimeout(async () => {
    if (gameData.restPlayers.length > 0) {
      const randomIndex = Math.floor(Math.random() * gameData.restPlayers.length);
      const autoPickId = gameData.restPlayers[randomIndex];
      await processDraftPick(gameData, autoPickId, client, guild, null);
    }
  }, 60000);
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ø—Ç–∞–Ω—Å–∫–æ–≥–æ "–ø–∏–∫–∞" —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.
 */
const handlePickInteraction = async function (interaction, gameId, pickPlayerId) {
  try {
    const gameData = activeGames.get(gameId);
    if (!gameData || gameData.gameStage !== 'draft') {
      if (!interaction.replied && !interaction.deferred) {
        return await interaction.reply({ content: '–°–µ–π—á–∞—Å –Ω–µ —Å—Ç–∞–¥–∏—è –¥—Ä–∞—Ñ—Ç–∞!', ephemeral: true });
      }
      return;
    }

    // Defer update if not already replied/deferred
    if (!interaction.replied && !interaction.deferred) {
      await interaction.deferUpdate();
    }

    const guild = await interaction.guild;
    await processDraftPick(gameData, pickPlayerId, interaction.client, guild, interaction);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handlePickInteraction:', error);
    if (!interaction.replied && !interaction.deferred) {
      try {
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä–æ–∫–∞!', ephemeral: true });
      } catch (replyErr) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyErr);
      }
    }
  }
};
module.exports.handlePickInteraction = handlePickInteraction;

/**
 * –ù–∞—á–∏–Ω–∞–µ–º —ç—Ç–∞–ø "–≤–µ—Ç–æ –∫–∞—Ä—Ç": –∫–∞–ø–∏—Ç–∞–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ —É–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ–¥–Ω–∞.
 */
async function startVetoPhase(gameData, client) {
  gameData.gameStage = 'veto';
  gameData.removedMaps = new Set();
  gameData.vetoTurns = 0;

  await updateMatchInDB(gameData.gameId, {
    gameStage: 'veto',
    removedMaps: [],
    vetoTurns: 0
  });

  const guild = await client.guilds.fetch(gameData.guildId);
  const currentCaptain = (gameData.vetoTurns % 2 === 0) ? gameData.captain1 : gameData.captain2;
  const embed = new EmbedBuilder()
    .setTitle(`–ú–∞—Ç—á #${gameData.gameId} ‚Äî –í–µ—Ç–æ –∫–∞—Ä—Ç`)
    .setDescription(
      `–ö–∞–ø–∏—Ç–∞–Ω—ã: <@${gameData.captain1}> –∏ <@${gameData.captain2}>\n` +
      `–°–µ–π—á–∞—Å —Ö–æ–¥: <@${currentCaptain}>\n\n` +
      `–ü–æ –æ—á–µ—Ä–µ–¥–∏ —É–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã. –ö–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 1 ‚Äî —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω.`
    )
    .setColor('Orange');

  const buttons = MAPS.map(m =>
    new ButtonBuilder()
      .setCustomId(`veto_${gameData.gameId}_${m.name}`)
      .setLabel(m.name)
      .setEmoji(m.emoji)
      .setStyle(ButtonStyle.Secondary)
  );
  const rows = createRowsForButtons(buttons, 5);

  await fetchEmbedMessageIfNeeded(gameData, client);
  if (!gameData.embedMessage) {
    console.error(`Embed –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∏–≥—Ä—ã ${gameData.gameId}. –ü—Ä–æ–ø—É—Å–∫ –≤–µ—Ç–æ.`);
    return;
  }

  await gameData.embedMessage.edit({ embeds: [embed], components: rows });
}
module.exports.startVetoPhase = startVetoPhase;

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "veto_{gameId}_{mapName}"
 */
async function handleVetoInteraction(interaction, gameId, mapName) {
  try {
    const gameData = activeGames.get(gameId);
    if (!gameData || gameData.gameStage !== 'veto') {
      if (!interaction.replied && !interaction.deferred) {
        return await interaction.reply({ content: '–°–µ–π—á–∞—Å –Ω–µ —Å—Ç–∞–¥–∏—è –≤–µ—Ç–æ!', ephemeral: true });
      }
      return;
    }

    const isC1Turn = (gameData.vetoTurns % 2 === 0);
    const currentCaptain = isC1Turn ? gameData.captain1 : gameData.captain2;
    if (interaction.user.id !== currentCaptain) {
      if (!interaction.replied && !interaction.deferred) {
        return await interaction.reply({ content: '–°–µ–π—á–∞—Å —Ö–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞!', ephemeral: true });
      }
      return;
    }

    // Defer update if not already replied/deferred
    if (!interaction.replied && !interaction.deferred) {
      await interaction.deferUpdate();
    }

    gameData.removedMaps.add(mapName);
    gameData.vetoTurns++;

    await updateMatchInDB(gameData.gameId, {
      removedMaps: Array.from(gameData.removedMaps),
      vetoTurns: gameData.vetoTurns
    });

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —É–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    const oldRows = interaction.message.components;
    const newRows = [];
    for (const row of oldRows) {
      const row2 = new ActionRowBuilder();
      for (const c of row.components) {
        const btn = ButtonBuilder.from(c);
        const id = btn.data?.custom_id;
        if (!id) {
          continue;
        }
        const [act, gId, thisMap] = id.split('_');
        if (thisMap === mapName) {
          btn.setStyle(ButtonStyle.Danger).setDisabled(true);
        }
        if (gameData.removedMaps.has(thisMap)) {
          btn.setDisabled(true);
        }
        row2.addComponents(btn);
      }
      newRows.push(row2);
    }

    const mapsLeft = MAPS.map(m => m.name).filter(name => !gameData.removedMaps.has(name));
    if (mapsLeft.length > 1) {
      // Update with current captain
      const currentCaptainAfter = (gameData.vetoTurns % 2 === 0) ? gameData.captain1 : gameData.captain2;
      const updatedEmbed = EmbedBuilder.from(interaction.message.embeds[0])
        .setDescription(
          `–ö–∞–ø–∏—Ç–∞–Ω—ã: <@${gameData.captain1}> –∏ <@${gameData.captain2}>\n` +
          `–°–µ–π—á–∞—Å —Ö–æ–¥: <@${currentCaptainAfter}>\n\n` +
          `–ü–æ –æ—á–µ—Ä–µ–¥–∏ —É–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã. –ö–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 1 ‚Äî —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω.`
        );
      await interaction.editReply({ embeds: [updatedEmbed], components: newRows });
    } else {
      // –û—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞
      const selectedMapName = mapsLeft[0];
      const selectedMap = MAPS.find(m => m.name === selectedMapName);
      gameData.finalMap = selectedMap ? selectedMap.code : selectedMapName;

      // –û–±–Ω–æ–≤–ª—è–µ–º UI, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∑–µ–ª—ë–Ω—ã–º
      const finalRows = [];
      for (const row of newRows) {
        const row2 = new ActionRowBuilder();
        for (const c of row.components) {
          const btn = ButtonBuilder.from(c);
          const id = btn.data?.custom_id;
          if (!id) {
            row2.addComponents(btn);
            continue;
          }
          const [act, gId, thisMap] = id.split('_');
          if (thisMap === selectedMapName) {
            btn.setStyle(ButtonStyle.Success);
          }
          btn.setDisabled(true);
          row2.addComponents(btn);
        }
        finalRows.push(row2);
      }
      await interaction.editReply({ components: finalRows });

      await updateMatchInDB(gameData.gameId, {
        finalMap: gameData.finalMap
      });

      // Add delay before finalizing teams
      setTimeout(async () => {
        await finalizeTeams(gameData, interaction.client);
      }, 1000);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Ç–æ:`, error);
    try {
      // Only attempt to reply if interaction hasn't been replied to
      if (!interaction.replied && !interaction.deferred) {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          ephemeral: true
        });
      }
    } catch (replyError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', replyError);
    }
  }
}

module.exports.handleVetoInteraction = handleVetoInteraction;

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥:
 * - –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã team1/team2
 * - –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç—É–¥–∞ –∏–≥—Ä–æ–∫–æ–≤
 * - –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á –Ω–∞ CS2-—Å–µ—Ä–≤–µ—Ä–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * - –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î team1/team2 —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º { steamId: discordName }
 */
async function finalizeTeams(gameData, client) {
  gameData.gameStage = 'teams_done';

  const guild = await client.guilds.fetch(gameData.guildId);
  const lobby = guild.channels.cache.get(gameData.lobbyId);

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞–Ω–∞–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (gameData.team1ChannelId) {
    const ch1 = guild.channels.cache.get(gameData.team1ChannelId);
    if (ch1) await ch1.delete().catch(() => { });
  }
  if (gameData.team2ChannelId) {
    const ch2 = guild.channels.cache.get(gameData.team2ChannelId);
    if (ch2) await ch2.delete().catch(() => { });
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  let category = lobby?.parent ?? null;
  if (!category || category.type !== ChannelType.GuildCategory) {
    category = await guild.channels.create({
      name: 'GAME_LOBBY',
      type: ChannelType.GuildCategory
    });
  }

  // –°–æ–∑–¥–∞—ë–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
  const team1Channel = await guild.channels.create({
    name: 'Team 1',
    type: ChannelType.GuildVoice,
    parent: category.id,
    permissionOverwrites: [
      { id: guild.roles.everyone, deny: [PermissionFlagsBits.Connect] }
    ]
  });
  const team2Channel = await guild.channels.create({
    name: 'Team 2',
    type: ChannelType.GuildVoice,
    parent: category.id,
    permissionOverwrites: [
      { id: guild.roles.everyone, deny: [PermissionFlagsBits.Connect] }
    ]
  });

  gameData.team1ChannelId = team1Channel.id;
  gameData.team2ChannelId = team2Channel.id;

  // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ lobby –≤ –∏—Ö –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  for (const pid of gameData.players) {
    const member = await guild.members.fetch(pid);
    if (member?.voice?.channel?.id === lobby?.id) {
      if (gameData.team1.includes(pid)) {
        await member.voice.setChannel(team1Channel);
      } else {
        await member.voice.setChannel(team2Channel);
      }
    }
  }

  await updateMatchInDB(gameData.gameId, {
    gameStage: 'teams_done',
    team1ChannelId: gameData.team1ChannelId,
    team2ChannelId: gameData.team2ChannelId,
    players: Array.from(gameData.players),
    team1: gameData.team1,
    team2: gameData.team2,
    finalMap: gameData.finalMap
  });

  // –£–¥–∞–ª—è–µ–º embed
  try {
    await gameData.embedMessage?.delete();
  } catch (err) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å embed:', err);
  }

  const teamObjectDB = await Match.findOne({ gameId: gameData.gameId });
  let matchInfo;
  try {
    const matchConfig = await formatMatchConfig(
      {
        gameId: gameData.gameId,
        finalMap: gameData.finalMap
      },
      teamObjectDB,
      client
    );

    const matchConfigResponse = await axios.post('https://763487648764376983479586.cfd/postText', {
      text: JSON.stringify(matchConfig)
    });

    const configId = matchConfigResponse?.data?.id;
    if (!configId) {
      throw new Error('Failed to get config ID from response');
    }

    matchInfo = await createMatchOnServer({
      gameId: gameData.gameId,
      finalMap: gameData.finalMap,
      matchConfigUrl: `https://763487648764376983479586.cfd/getText/${configId}`
    });
    console.log(`–ú–∞—Ç—á #${gameData.gameId} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ CS2-—Å–µ—Ä–≤–µ—Ä–µ —Å MatchZy.`);
  } catch (error) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç—á #${gameData.gameId} –Ω–∞ CS2-—Å–µ—Ä–≤–µ—Ä–µ:`, error);
  }

  // In the finalizeTeams function, update the connect message part:
  if (matchInfo) {
    for (const pid of gameData.players) {
      try {
        const user = await client.users.fetch(pid);
        if (user) {
          const connectEmbed = new EmbedBuilder()
            .setTitle("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –º–∞—Ç—á—É!")
            .setDescription(
              `Match ID: **${gameData.gameId}**\n\n` +
              `–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\`\`\`bash\nconnect ${matchInfo.host}:${matchInfo.port}\n\`\`\``
            )
            .setColor("Green")
            .setFooter({ text: "–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!" });
          await user.send({ embeds: [connectEmbed] });
        }
      } catch (err) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${pid}:`, err);
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –ø–∞–º—è—Ç–∏
  activeGames.delete(gameData.gameId);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–∞—Ç—á –≤ —Ç–æ–º –∂–µ –∫–∞–Ω–∞–ª–µ
  const queueChannel = guild.channels.cache.get(gameData.queueChannelId);
  if (queueChannel) {
    try {
      const { createNewGame } = require('./gameManager');
      await createNewGame({
        guild,
        queueTextChannel: queueChannel,
        lobbyVoice: lobby,
        requiredPlayers: gameData.requiredPlayers
      });
      console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ç—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (requiredPlayers=${gameData.requiredPlayers}).`);
    } catch (err) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á:', err);
    }
  }
}
module.exports.finalizeTeams = finalizeTeams;

/**
 * ================================
 *          HELPER FUNCTIONS
 * ================================
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç embedMessage, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–º—è—Ç–∏.
 */
async function fetchEmbedMessageIfNeeded(gameData, client) {
  if (gameData.embedMessage) return;
  if (!gameData.embedMessageId) return;

  try {
    const guild = await client.guilds.fetch(gameData.guildId);
    const channel = guild.channels.cache.get(gameData.queueChannelId);
    if (!channel) return;
    const msg = await channel.messages.fetch(gameData.embedMessageId);
    gameData.embedMessage = msg;
  } catch (err) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å embed –¥–ª—è –∏–≥—Ä—ã ${gameData.gameId}:`, err);
  }
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–æ–±–±–∏ (staging = 'waiting').
 */
function getWaitingDescription(gameData) {
  const cnt = gameData.players.size;
  const req = gameData.requiredPlayers;
  const list = Array.from(gameData.players).map(p => `<@${p}>`).join('\n');
  return `–ù—É–∂–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: **${req}**\n–£–∂–µ –≤ Lobby (${cnt}):\n${list || '_–Ω–∏–∫–æ–≥–æ –Ω–µ—Ç_'}\n`;
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞ readyCheck.
 */
function getReadyDescriptionCheck(gameData) {
  let desc = `–ù–∞–∂–º–∏—Ç–µ "–Ø –≥–æ—Ç–æ–≤!" –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥.\n\n`;
  for (const pid of gameData.players) {
    desc += gameData.readyPlayers.has(pid)
      ? `<@${pid}> ‚úÖ\n`
      : `<@${pid}> ‚ùå\n`;
  }
  return desc;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ Discord ID –≤ –æ–±—ä–µ–∫—Ç –≤–∏–¥–∞ { steamId: discordName }
 */
async function transformTeam(discordIdArray) {
  const obj = {};
  for (const discordId of discordIdArray) {
    const userRecord = await User.findOne({ userId: discordId });
    if (userRecord && userRecord.steamId) {
      obj[userRecord.steamId] = userRecord.username || discordId;
    } else {
      // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ steamId, —Ç–æ –ø–∏—à–µ–º discordId –∫–∞–∫ –∫–ª—é—á
      obj[discordId] = discordId;
    }
  }
  return obj;
}

async function updateMatchInDB(gameId, updateObj) {
  // 1) –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set -> Array
  // 2) –ï—Å–ª–∏ gameStage !== 'teams_done', —É–±–∏—Ä–∞–µ–º team1/team2 –∏–∑ updateObj 
  //    (—á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–∞—Å—Å–∏–≤—ã –≤ Map)

  const finalUpdate = {};
  for (const [k, v] of Object.entries(updateObj)) {
    if (v instanceof Set) {
      finalUpdate[k] = Array.from(v);
    } else {
      finalUpdate[k] = v;
    }
  }

  // –ï—Å–ª–∏ stage –ù–ï teams_done, –≤—ã—Ä–µ–∑–∞–µ–º team1/team2 –∏–∑ finalUpdate
  // —á—Ç–æ–±—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—É–¥–∞ –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ Map
  if (finalUpdate.gameStage !== 'teams_done') {
    delete finalUpdate.team1;
    delete finalUpdate.team2;
  }

  // –ï—Å–ª–∏ stage == 'teams_done', —Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ team1/team2 ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ Discord ID,
  // –∏ –Ω—É–∂–Ω–æ transformTeam -> Map
  if (finalUpdate.gameStage === 'teams_done') {
    if (Array.isArray(finalUpdate.team1)) {
      finalUpdate.team1 = await transformTeam(finalUpdate.team1);
    }
    if (Array.isArray(finalUpdate.team2)) {
      finalUpdate.team2 = await transformTeam(finalUpdate.team2);
    }
  }

  try {
    await Match.findOneAndUpdate(
      { gameId },
      { $set: finalUpdate },
      { new: true, runValidators: true }
    );
  } catch (err) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Match (gameId=${gameId}):`, err);
  }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ (–ø–æ 5 –Ω–∞ —Å—Ç—Ä–æ–∫—É).
 */
function createRowsForButtons(buttons, perRow = 5) {
  const rows = [];
  for (let i = 0; i < buttons.length; i += perRow) {
    const slice = buttons.slice(i, i + perRow);
    const row = new ActionRowBuilder().addComponents(slice);
    rows.push(row);
  }
  return rows;
}

/**
 * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞‚Äì–ô–µ—Ç—Å–∞).
 */
function shuffleArray(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
}

module.exports = {
  activeGames,
  createNewGame,
  restoreActiveMatches,
  manageLobbyJoinLeave,
  startReadyCheck,
  handleReadyCheck,
  returnToWaitingStage,
  startDraftPhase,
  handlePickInteraction,
  startVetoPhase,
  handleVetoInteraction,
  finalizeTeams
};
